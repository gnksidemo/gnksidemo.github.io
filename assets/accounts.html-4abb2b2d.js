import{_ as o,W as i,X as r,Y as t,Z as e,$ as s,a1 as a,C as d}from"./framework-a045178c.js";const c={},l=a('<h1 id="accounts" tabindex="-1"><a class="header-anchor" href="#accounts" aria-hidden="true">#</a> Accounts</h1><p>This document describes the in-built account and public key system of the Greenfield</p><h2 id="account-definition" tabindex="-1"><a class="header-anchor" href="#account-definition" aria-hidden="true">#</a> Account Definition</h2><p>In the Greenfield, an <em>account</em> designates a pair of <em>public key</em> <code>PubKey</code> and <em>private key</em> <code>PrivKey</code>. The <code>PubKey</code> can be derived to generate various <code>Addresses</code>, which are used to identify users (among other parties) in the application.</p><h2 id="signatures" tabindex="-1"><a class="header-anchor" href="#signatures" aria-hidden="true">#</a> Signatures</h2>',5),h={href:"https://en.wikipedia.org/wiki/Digital_signature",target:"_blank",rel:"noopener noreferrer"},u=t("code",null,"Account",-1),p=a('<p>In the node, all data is stored using Protocol Buffers serialization.</p><p>Greenfield only supports <code>secp256k1</code> key schemes for creating digital signatures:</p><table><thead><tr><th style="text-align:center;"></th><th style="text-align:center;">Address length in bytes</th><th style="text-align:center;">Public key length in bytes</th><th style="text-align:center;">Used for transaction authentication</th><th style="text-align:center;">Used for consensus (tendermint)</th></tr></thead><tbody><tr><td style="text-align:center;"><code>secp256k1</code></td><td style="text-align:center;">20</td><td style="text-align:center;">33</td><td style="text-align:center;">yes</td><td style="text-align:center;">no</td></tr></tbody></table><h2 id="addresses" tabindex="-1"><a class="header-anchor" href="#addresses" aria-hidden="true">#</a> Addresses</h2><p><code>Addresses</code> and <code>PubKey</code>s are both public information that identifies actors in the application. <code>Account</code> is used to store authentication information. The basic account implementation is provided by a <code>BaseAccount</code> object.</p>',5),f=t("code",null,"AccAddress",-1),g=t("code",null,"ValAddress",-1),_=t("code",null,"ConsAddress",-1),y=t("code",null,"AccAddress",-1),b={href:"https://eips.ethereum.org/EIPS/eip-55",target:"_blank",rel:"noopener noreferrer"};function m(x,k){const n=d("ExternalLinkIcon");return i(),r("div",null,[l,t("p",null,[e("The principal way of authenticating a user is done using "),t("a",h,[e("digital signatures"),s(n)]),e(". Users sign transactions using their own private key. Signature verification is done with the associated public key. For on-chain signature verification purposes, we store the public key in an "),u,e(" object (alongside other data required for a proper transaction validation).")]),p,t("p",null,[e("Unlike Cosmos SDK who defines 3 types of addresses: "),f,e(", "),g,e(" and "),_,e(", Greenfield only use the "),y,e(", and the address format follows "),t("a",b,[e("ERC-55"),s(n)]),e(".")])])}const v=o(c,[["render",m],["__file","accounts.html.vue"]]);export{v as default};
