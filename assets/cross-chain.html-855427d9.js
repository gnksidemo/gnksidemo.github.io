import{_ as r}from"./03-Cross-chain-Architecture-30426338.js";import{_ as o,W as s,X as c,Y as a,Z as e,$ as n,a1 as i,C as l}from"./framework-a045178c.js";const d={},h=i('<h2 id="framework" tabindex="-1"><a class="header-anchor" href="#framework" aria-hidden="true">#</a> Framework</h2><div align="center"><img src="'+r+`" height="95%" width="95%"></div><div align="center"><i>Figure Cross-chain Architecture</i></div><p>Above figure shows the layered design of cross-chain:</p><ol><li>The bottom layer is a cross-chain <strong>Communication Layer</strong>, which focuses on primitive communication package handling and verification.</li><li>The middle layer implements the <strong>Resource Mirror</strong>. It is responsible for managing the resource assets that are defined on Greenfield but mirrored onto BSC.</li><li>The top layer is the <strong>Application Layer</strong>, which are the smart contracts implemented by community developers on BSC to operate the mirrored resource entities with their primitives; Greenfield does not have such an application layer since itself does not provide programmability yet. The real dApps will have some part in this Application Layer and also interact with Greenfield Core and all sorts of supporting infrastructures.</li></ol><p>Because of the asymmetric framework, BSC focuses more on the <strong>application/control plane</strong>, while Greenfield is the <strong>data plane</strong>. To avoid state racing, the following rules are introduced:</p><ul><li><p>Any resources that are initiated to create by BSC can only be controlled by BSC.</p></li><li><p>Any resources that are controlled by BSC can not transfer control rights to Greenfield.</p></li><li><p>Any resources that are controlled by Greenfield can transfer control rights to BSC.</p></li></ul><h2 id="communication-layer" tabindex="-1"><a class="header-anchor" href="#communication-layer" aria-hidden="true">#</a> Communication Layer</h2><p>The communication layer is composed of a set of <strong>Greenfield Relayers</strong>:</p><ul><li><p>Each validator should run a relayer. Each relayer possesses a BLS private key, with the address of the key stored on-chain as part of the validator&#39;s mandatory information.</p></li><li><p>The relayer watches all cross-chain events happen on BSC and the Greenfield blockchain independently. After enough blocks of confirmation to reach finality, the relayer will sign a message by the BLS key to confirm the events, and broadcast the signing attestment, which is called &quot;the vote&quot;, through a p2p network to other relayers.</p></li><li><p>Once enough votes from the relayer are collected, the relayer will assemble a cross-chain package transaction and submit it to BSC or Greenfield network.</p></li></ul><p>Here more details about the communication layer and economics will be explained.</p><h3 id="vote-poll" tabindex="-1"><a class="header-anchor" href="#vote-poll" aria-hidden="true">#</a> Vote Poll</h3><p>A new p2p communication across the cross-chain relayers will be introduced, called &quot;Vote Poll&quot;. This Vote Poll will gossip about the signed votes within the network. To avoid message flooding, all the signed votes will expire after a fixed time. The Greenfield relayers can either put votes to or fetch votes from the poll and assemble it as cross-chain package transactions.</p><h3 id="channel-and-sequence" tabindex="-1"><a class="header-anchor" href="#channel-and-sequence" aria-hidden="true">#</a> Channel and Sequence</h3><p>To allow multiplexing and replay attack resistance, &quot;Channel&quot; and &quot;Sequence&quot; concepts are introduced to manage any type of communication. Following is an example definition:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Package <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    PackType     <span class="token builtin">uint8</span> <span class="token comment">// SYN, ACK or FAIL_ACK</span>
    SrcChainId   <span class="token builtin">uint16</span>
    DstChainId   <span class="token builtin">uint16</span>
    Sequence     <span class="token builtin">int64</span>
    ChannelId    <span class="token builtin">uint16</span>
    Payload      <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>
    BLSSignature sdk<span class="token punctuation">.</span>Sig
    BLSBits      sdk<span class="token punctuation">.</span>Bits <span class="token comment">// indicate the signer of the package</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The packages in the same channel must be processed in sequence, while they can be processed in parallel if they belong to different channels.</p><p>The operation messages on different Greenfield resources are mapped to different channels. For example, buckets and storage objects belong to different channels.</p><h3 id="reliability-protocol" tabindex="-1"><a class="header-anchor" href="#reliability-protocol" aria-hidden="true">#</a> Reliability Protocol</h3><p>Here a protocol is defined to ensure reliable stream delivery of data between BSC and Greenfield.</p><p>The protocol must recover the scenarios when the cross-chain data is damaged, duplicated, or delivered out of order by the relayers. It assigns a sequence number to each package and requires a positive acknowledgment (<code>ACK</code>) from the target chain. Here there are three kinds of packages:</p><ol><li><p><code>SYN</code>: the initial cross-chain packages started by either users or dApps.</p></li><li><p><code>ACK</code>: the positive acknowledgment sent by the resource layer of the target chain.</p></li><li><p><code>FAIL_ACK</code>: the negative acknowledgment sent by the communication layer of the target chain, usually caused by damaged data or protocol inconsistency triggered by the edge case.</p></li></ol><p>Each communication package must start with <code>SYN</code> and end with ACK or <code>FAIL_ACK</code>. The handler code and contracts on each side must handle these primitives.</p><h3 id="validator-update" tabindex="-1"><a class="header-anchor" href="#validator-update" aria-hidden="true">#</a> Validator Update</h3><p>With an aggregatable multi-signature scheme, e.g. BLS, the cross-chain can be quite light-weighted. However, sufficient data must be appended onto the package to indicate the validators who sign the events, this can be achieved by combining a bitmap and a validator set on-chain. However, the Greenfield validator set is volatile, Greenfield validators have to sync the information to BSC once there is an update about the Greenfield validator set. This is implemented by building a Greenfield light client on BSC, which is similar to the light client implemented for BNB Beacon Chain on BSC.</p><h3 id="economic" tabindex="-1"><a class="header-anchor" href="#economic" aria-hidden="true">#</a> Economic</h3><p>The Greenfield relayers play an important role in relaying inter-chain packages. A proper incentive is introduced to keep relayers making their long-term contribution.</p><h4 id="fee-and-reward-of-cross-chain-packages" tabindex="-1"><a class="header-anchor" href="#fee-and-reward-of-cross-chain-packages" aria-hidden="true">#</a> Fee and Reward of Cross-Chain Packages</h4><p>Both <code>SYN</code> and <code>ACK</code>/<code>FAIL_ACK</code> packages cost gas to relay, the users (or smart contracts) will need to pay the fee to cover both of them when they start the <code>SYN</code> cross-chain packages.</p><p>To encourage Greenfield relayers to sign cross-chain packages:</p><ol><li><p>The package deliverer will get a fixed ratio of the relay fee as a reward.</p></li><li><p>The rest relay fee will be distributed equally among those who sign the vote.</p></li></ol><h4 id="race-to-deliver-cross-chain-packages" tabindex="-1"><a class="header-anchor" href="#race-to-deliver-cross-chain-packages" aria-hidden="true">#</a> Race to Deliver Cross-Chain Packages</h4><p>There are multiple Greenfield relayers, and they may compete to submit the aggregated multi-signed packages onto the Greenfield blockchain and BSC. To avoid racing transactions caused by the competition, which wastes gas, the relayers are rotated to relay transactions, e.g. taking shifts every 10 minutes. Each cross-chain package gets a timestamp, if it is not relayed within a limited delay when the designated relayer doesn&#39;t perform the duty, any other Greenfield relayers are allowed to relay such a package.</p><h4 id="callbacks-and-limited-gas" tabindex="-1"><a class="header-anchor" href="#callbacks-and-limited-gas" aria-hidden="true">#</a> Callbacks and Limited Gas</h4><p>BSC dApps, i.e. smart contracts on BSC, are allowed to implement their own logic to handle <code>ACK</code> or <code>FAIL_ACK</code> packages. The smart contracts can register callback functions to handle the <code>ACK</code> packages. As it is impossible for the cross-chain infrastructure to predict the gas consumption of the callback, a gas limitation estimate should be defined from the smart contracts that register the callbacks.</p><p>For any cross-chain packages that start from BSC, the smart contract needs to specify the gas limitation for the <code>ACK</code> or <code>FAIL_ACK</code> package, the relayer fee is prepaid accordingly on BSC. Relayers may refund the excessive fees later.</p><h2 id="resource-mirror-layer" tabindex="-1"><a class="header-anchor" href="#resource-mirror-layer" aria-hidden="true">#</a> Resource Mirror Layer</h2><h3 id="resource-entity-mirror" tabindex="-1"><a class="header-anchor" href="#resource-entity-mirror" aria-hidden="true">#</a> Resource Entity Mirror</h3><p>The purposes of almost all the cross-chain packages are to change the state of the resource entities on the Greenfield blockchain. Thus, the below resource entities should be able to be mirrored on BSC: Account, BNB, Bucket, Object and Group.</p><p>The account mapping is natural: as BSC and Greenfield use the same address scheme. The same address values on both sides mean the same account. They do not require an actual mirror.</p><p>BNB is a natively pegged token from the genesis of Greenfield. The <code>Token Hub</code> contract is a smart contract built on BSC to ensure that Greenfield cannot inflate BNB and secure the total circulation of BNB.</p>`,41),p={href:"https://eips.ethereum.org/EIPS/eip-721",target:"_blank",rel:"noopener noreferrer"},u={href:"https://eips.ethereum.org/EIPS/eip-1155",target:"_blank",rel:"noopener noreferrer"},m=i('<h3 id="cross-chain-operating-primitives" tabindex="-1"><a class="header-anchor" href="#cross-chain-operating-primitives" aria-hidden="true">#</a> Cross-Chain Operating Primitives</h3><p>A few series of cross-chain primitives are defined for dApps to call to operate on these resource entities.</p><p>It is worth highlighting that smart contracts can call these primitives in a similar way as EOAs.</p><p>Accounts</p><ul><li>create payment accounts on BSC</li></ul><p>BNB:</p><ul><li>transfer bidirectionally between BSC and Greenfield among accounts (including even payment accounts)</li></ul><p>Bucket:</p><ul><li><p>create a bucket on BSC</p></li><li><p>mirror bucket from Greenfield to BSC</p></li></ul><p>Object:</p><ul><li><p>mirror object from Greenfield to BSC</p></li><li><p>create an object on BSC</p></li><li><p>grant/revoke permissions of objects on BSC to accounts/groups</p></li><li><p>copy objects on BSC</p></li><li><p>Kick off the execution of an object on BSC</p></li><li><p>associate buckets to payment accounts on BSC</p></li></ul><p>Group:</p><ul><li><p>mirror group from Greenfield to BSC</p></li><li><p>create a group on BSC</p></li><li><p>change group members on BSC</p></li><li><p>leave a group on BSC</p></li></ul><p>Once these primitives are called by EOA or smart contracts, the predefined events will be emitted. Greenfield Relayers should pick up these events and relay them over to Greenfield and BSC. As the change will happen asynchronously, there will be specific cross-chain packages for acknowledgments or errors, which can trigger a callback. The caller of the primitives should pay the fees upfront for cross-chain operations and also for the potential callback.</p>',14);function f(g,b){const t=l("ExternalLinkIcon");return s(),c("div",null,[h,a("p",null,[e("Bucket, Object, and Group are mirrored onto BSC as NFTs of a new BEP revised from the "),a("a",p,[e("ERC-721"),n(t)]),e(" and "),a("a",u,[e("ERC-1155"),n(t)]),e(" standard. These NFTs have corresponding metadata information for the resources. The ownerships of the NFTs on BSC stand for the ownerships of these resources on Greenfield. As these ownerships are not transferable on Greenfield, these NFTs are not transferable on BSC.")]),m])}const v=o(d,[["render",f],["__file","cross-chain.html.vue"]]);export{v as default};
