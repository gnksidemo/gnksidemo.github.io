import{_ as r,W as i,X as o,Y as t,Z as e,$ as a,a1 as s,C as d}from"./framework-a045178c.js";const c={},h=t("h1",{id:"accounts",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#accounts","aria-hidden":"true"},"#"),e(" Accounts")],-1),l=t("p",null,"Each user has their own address as the identifier for his/her account. The addresses can create objects to store on Greenfield, bear and manage the permissions, and pay fees.",-1),u={href:"https://github.com/ethereum/EIPs/issues/84",target:"_blank",rel:"noopener noreferrer"},f={href:"https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki",target:"_blank",rel:"noopener noreferrer"},p=s('<p>With this compatible address scheme, the users can reuse existing accounts and infrastructure from BSC on Greenfield. For example, they can use TrustWallet and Metamask (or other compatible wallets) to deposit their BNB from BSC to Greenfield and interact with dApps on Greenfield. It is also easy to identify the same owner by referring to the same addresses on both BSC and Greenfield.</p><h2 id="user-balance" tabindex="-1"><a class="header-anchor" href="#user-balance" aria-hidden="true">#</a> User Balance</h2><p>The account can hold a balance of BNB. These BNBs can be used to participate in staking, pay for gas fees of Greenfield transactions, and pay for Greenfield services.</p><p>This balance can be added via native BNB transfer on Greenfield, or cross-chain transfer between Greenfield and BSC.</p><h2 id="account-definition" tabindex="-1"><a class="header-anchor" href="#account-definition" aria-hidden="true">#</a> Account Definition</h2><p>In the Greenfield, an <strong>account</strong> designates a pair of <code>PubKey</code> and <code>PrivKey</code>. The <code>PubKey</code> can be derived to generate various <code>Addresses</code>, which are used to identify users (among other parties) in the application.</p><h2 id="signatures" tabindex="-1"><a class="header-anchor" href="#signatures" aria-hidden="true">#</a> Signatures</h2>',7),b={href:"https://en.wikipedia.org/wiki/Digital_signature",target:"_blank",rel:"noopener noreferrer"},g=t("code",null,"Account",-1),_={href:"https://protobuf.dev/",target:"_blank",rel:"noopener noreferrer"},m={href:"https://en.bitcoin.it/wiki/Secp256k1",target:"_blank",rel:"noopener noreferrer"},y=s('<table><thead><tr><th style="text-align:center;"></th><th style="text-align:center;">Address length in bytes</th><th style="text-align:center;">Public key length in bytes</th><th style="text-align:center;">Used for transaction authentication</th><th style="text-align:center;">Used for consensus (tendermint)</th></tr></thead><tbody><tr><td style="text-align:center;"><code>secp256k1</code></td><td style="text-align:center;">20</td><td style="text-align:center;">33</td><td style="text-align:center;">yes</td><td style="text-align:center;">no</td></tr></tbody></table><h2 id="addresses" tabindex="-1"><a class="header-anchor" href="#addresses" aria-hidden="true">#</a> Addresses</h2><p><code>Addresses</code> and <code>PubKey</code>s are both public information that identifies actors in the application. <code>Account</code> is used to store authentication information. The basic account implementation is provided by a <code>BaseAccount</code> object.</p>',3),k=t("code",null,"AccAddress",-1),x={href:"https://eips.ethereum.org/EIPS/eip-55",target:"_blank",rel:"noopener noreferrer"};function B(w,v){const n=d("ExternalLinkIcon");return i(),o("div",null,[h,l,t("p",null,[e("Greenfield defines its account in the same format as BSC and Ethereum. It starts with ECDSA secp256k1 curve for keys and is compliant with "),t("a",u,[e("EIP84"),a(n)]),e(" for full "),t("a",f,[e("BIP44"),a(n)]),e(" paths. The root HD path for Greenfield-based accounts is m/44'/60'/0'/0. In the readable presentation, a Greenfield address is a 42-character hexadecimal string derived from the last 20 bytes of the public key of the controlling account with 0x as the prefix.")]),p,t("p",null,[e("The principal way of authenticating a user is done using "),t("a",b,[e("digital signatures"),a(n)]),e(". Users sign transactions using their own private key. Signature verification is done with the associated public key. For on-chain signature verification purposes, we store the public key in an "),g,e(" object (alongside other data required for a proper transaction validation).")]),t("p",null,[e("In the node, all data is stored using "),t("a",_,[e("Protocol Buffers"),a(n)]),e(" serialization.")]),t("p",null,[e("Greenfield only supports "),t("a",m,[e("secp256k1"),a(n)]),e(" key schemes for creating digital signatures:")]),y,t("p",null,[e("Unlike Cosmos SDK who defines 3 types of addresses, Greenfield only use the "),k,e(", and the address format follows "),t("a",x,[e("ERC-55"),a(n)]),e(".")])])}const A=r(c,[["render",B],["__file","accounts.html.vue"]]);export{A as default};
