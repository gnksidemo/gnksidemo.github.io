import{_ as e,W as t,X as a,a1 as r}from"./framework-a045178c.js";const i="/assets/03-Cross-chain-Architecture-610a4b78.jpg",o={},s=r('<h1 id="cross-chain" tabindex="-1"><a class="header-anchor" href="#cross-chain" aria-hidden="true">#</a> Cross Chain</h1><p>The real power of the Greenfield ecosystem lies in that the platform is not only designed to store the data, but also to support the creation of value based on the data assets and its related economy.</p><p>The asset traits of the data are firstly established on the permissions, e.g. the permission to read the data. When this right is disconnected from the data itself, they become tradable assets and enlarge the value of the data. This can be amplified when the data itself can be executable (a new type of &quot;Smart Code&quot;), interact with each other, and generate new data. This creates a lot of room to imagine building a new, data-intensive, trustless computing environment.</p><p>Secondly, the data permissions can be transferred cross-chain onto BSC and become digital assets there. This creates a variety of possibilities to integrate these assets with the existing DeFi protocols and models on BSC.</p><p>This gets even further enhanced by the smart contracts on BSC, which enjoy the same address format as accounts on the Greenfield blockchain and can be the owners of the data objects and inherit different permissions. This will unleash many new business opportunities based on the data and its operations.</p><h2 id="cross-chain-with-bsc" tabindex="-1"><a class="header-anchor" href="#cross-chain-with-bsc" aria-hidden="true">#</a> Cross-Chain with BSC</h2><p>The cross-chain model expects to achieve the following goals:</p><ul><li><p>integratable with the existing systems: try to reuse the current infrastructure and dApps as much as possible, such as NFT Marketplace, data indexing, and blockchain explorers.</p></li><li><p>programmable: dApps can define how they want to wrap the assets from Greenfield.</p></li><li><p>secure and recoverable.</p></li></ul><p>The native cross-chain bridge is maintained and secured by the validators of Greenfield, via a new relayer system based on an aggregated multisig scheme (more details in the later sections). Validators will run the relayers to facilitate the high bandwidth and fast bridge.</p><p>BNB will be transferred from BSC to Greenfield as the first cross-chain action. The initial validator set of Greenfield at the genesis will first lock a certain amount of BNB into the &quot;Greenfield Token Hub&quot; contract on BSC. This contract will also be used as part of the native bridge for BNB transferring after the genesis. These initial locked BNB will be used as the self-stake of validators and early days gas fees.</p><h2 id="framework" tabindex="-1"><a class="header-anchor" href="#framework" aria-hidden="true">#</a> Framework</h2><div align="center"><img src="'+i+'" height="80%" width="80%"></div><div align="center"><i>Figure Cross-chain Architecture</i></div><p>The bottom layer is a cross-chain <strong>Communication Layer</strong>, which focuses on primitive communication package handling and verification. The middle layer implements the <strong>Resource Mirror</strong>. It is responsible for managing the resource assets that are defined on Greenfield but mirrored onto BSC. The top layer is the <strong>Application Layer</strong>, which are the smart contracts implemented by community developers on BSC to operate the mirrored resource entities with their primitives; Greenfield does not have such an application layer since itself does not provide programmability yet. The real dApps will have some part in this Application Layer and also interact with Greenfield Core and all sorts of supporting infrastructures.</p><p>Because of the asymmetric framework, BSC focuses more on the application/control plane, while Greenfield is the data plane. To avoid state racing, the following rules are introduced:</p><ul><li><p>Any resources that are initiated to create by BSC can only be controlled by BSC.</p></li><li><p>Any resources that are controlled by BSC can not transfer control rights to Greenfield.</p></li><li><p>Any resources that are controlled by Greenfield can transfer control rights to BSC.</p></li></ul><h2 id="communication-layer" tabindex="-1"><a class="header-anchor" href="#communication-layer" aria-hidden="true">#</a> Communication Layer</h2><p>The communication layer is composed of a set of <strong>Greenfield Relayers</strong>:</p><ul><li><p>Each validator should run a relayer. Each relayer possesses a BLS private key, with the address of the key stored on-chain as part of the validator&#39;s mandatory information.</p></li><li><p>The relayer watches all cross-chain events happen on BSC and the Greenfield blockchain independently. After enough blocks of confirmation to reach finality, the relayer will sign a message by the BLS key to confirm the events, and broadcast the signing attestment, which is called &quot;the vote&quot;, through a p2p network to other relayers.</p></li><li><p>Once enough votes from the relayer are collected, the relayer will assemble a cross-chain package transaction and submit it to BSC or Greenfield network.</p></li></ul><h2 id="resource-mirror-layer" tabindex="-1"><a class="header-anchor" href="#resource-mirror-layer" aria-hidden="true">#</a> Resource Mirror Layer</h2><h3 id="resource-entity-mirror" tabindex="-1"><a class="header-anchor" href="#resource-entity-mirror" aria-hidden="true">#</a> Resource Entity Mirror</h3><p>The purposes of almost all the cross-chain packages are to change the state of the resource entities on the Greenfield blockchain. Thus, the below resource entities should be able to be mirrored on BSC:</p><ol><li><p>Account</p></li><li><p>BNB</p></li><li><p>Bucket</p></li><li><p>Object</p></li><li><p>Group</p></li></ol><p>The account mapping is natural: as BSC and Greenfield use the same address scheme. The same address values on both sides mean the same account. They do not require an actual mirror.</p><p>BNB is a natively pegged token from the genesis of Greenfield. The &quot;Token Hub&quot; contract is a smart contract built on BSC to ensure that Greenfield cannot inflate BNB and secure the total circulation of BNB.</p><p>Bucket, Object, and Group are mirrored onto BSC as NFTs of a new BEP revised from the ERC-721 standard. These NFTs have corresponding metadata information for the resources. The ownerships of the NFTs on BSC stand for the ownerships of these resources on Greenfield. As these ownerships are not transferable on Greenfield, these NFTs are not transferable on BSC.</p><h3 id="cross-chain-operating-primitives" tabindex="-1"><a class="header-anchor" href="#cross-chain-operating-primitives" aria-hidden="true">#</a> Cross-Chain Operating Primitives</h3><p>A few series of cross-chain primitives are defined for dApps to call to operate on these resource entities.</p><p>It is worth highlighting that smart contracts can call these primitives in a similar way as EOAs.</p><p>Accounts</p><ul><li>create payment accounts on BSC</li></ul><p>BNB:</p><ul><li>transfer bidirectionally between BSC and Greenfield among accounts (including even payment accounts)</li></ul><p>Bucket:</p><ul><li><p>create a bucket on BSC</p></li><li><p>mirror bucket from Greenfield to BSC</p></li></ul><p>Object:</p><ul><li><p>mirror object from Greenfield to BSC</p></li><li><p>create an object on BSC</p></li><li><p>grant/revoke permissions of objects on BSC to accounts/groups</p></li><li><p>copy objects on BSC</p></li><li><p>Kick off the execution of an object on BSC</p></li><li><p>associate buckets to payment accounts on BSC</p></li></ul><p>Group:</p><ul><li><p>mirror group from Greenfield to BSC</p></li><li><p>create a group on BSC</p></li><li><p>change group members on BSC</p></li><li><p>leave a group on BSC</p></li></ul><p>Once these primitives are called by EOA or smart contracts, the predefined events will be emitted. Greenfield Relayers should pick up these events and relay them over to Greenfield and BSC. As the change will happen asynchronously, there will be specific cross-chain packages for acknowledgments or errors, which can trigger a callback. The caller of the primitives should pay the fees upfront for cross-chain operations and also for the potential callback. More details are discussed in Part 3.</p>',40),n=[s];function l(c,h){return t(),a("div",null,n)}const p=e(o,[["render",l],["__file","cross-chain.html.vue"]]);export{p as default};
