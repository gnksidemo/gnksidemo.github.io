import{_ as n,W as o,X as t,Y as a,Z as e,$ as i,a1 as r,C as c}from"./framework-a045178c.js";const l={},d=a("h1",{id:"command-line-interface",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#command-line-interface","aria-hidden":"true"},"#"),e(" Command-Line Interface")],-1),p={href:"https://github.com/spf13/cobra",target:"_blank",rel:"noopener noreferrer"},m=a("code",null,"tx",-1),h=a("code",null,"query",-1),u=a("strong",null,"Arguments",-1),b=r(`<h3 id="transaction-command" tabindex="-1"><a class="header-anchor" href="#transaction-command" aria-hidden="true">#</a> Transaction Command</h3><p>Here is an example of a command a user might enter to interact with <code>gnfd</code> in order to send some tokens:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ gnfd tx bank send <span class="token variable">$MY_VALIDATOR_ADDRESS</span> <span class="token variable">$RECIPIENT</span> 1000BNB <span class="token parameter variable">--gas</span> auto
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>The first four strings specify the command:</p><ul><li>The subcommand <code>tx</code>, which contains all commands that let users create transactions.</li><li>The subcommand <code>bank</code> to indicate which module to route the command to <code>x/bank</code> module in this case.</li><li>The type of transaction <code>send</code>.</li></ul><p>The next two strings are arguments: the <code>from_address</code> the user wishes to send from, the <code>to_address</code> of the recipient, and the <code>amount</code> they want to send. Finally, the last few strings of the command are optional flags to indicate how much the user is willing to pay in fees.</p><h3 id="query-commands" tabindex="-1"><a class="header-anchor" href="#query-commands" aria-hidden="true">#</a> Query Commands</h3><p>Queries are objects that allow users to retrieve information about the application&#39;s state.</p><p>This <code>queryCommand</code> function adds all the queries available to end-users for the application. This typically includes:</p><ul><li><strong>QueryTx</strong> and/or other transaction query commands from the <code>auth</code> module which allow the user to search for a transaction by inputting its hash, a list of tags, or a block height. These queries allow users to see if transactions have been included in a block.</li><li><strong>Account command</strong> from the <code>auth</code> module, which displays the state (e.g. account balance) of an account given an address.</li><li><strong>Validator command</strong> from the Cosmos SDK rpc client tools, which displays the validator set of a given height.</li><li><strong>Block command</strong> from the Cosmos SDK rpc client tools, which displays the block data for a given height.</li><li>**All module query commands the application is dependent on,</li></ul><p>Here is an example of a <code>queryCommand</code>:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">## query the metadata of BNB</span>
$ gnfd q bank  denom-metadata <span class="token parameter variable">--node</span> tcp://127.0.0.1:26750
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="environment-variables" tabindex="-1"><a class="header-anchor" href="#environment-variables" aria-hidden="true">#</a> Environment variables</h2><p>Each flag is bound to its respective named environment variable. Then name of the environment variable consist of two parts</p><ul><li>capital case <code>basename</code> followed by flag name of the flag. <code>-</code> must be substituted with <code>_</code>.</li><li>For example flag <code>--home</code> for application with basename <code>GNFD</code> is bound to <code>GNFD_HOME</code>. It allows reducing the amount of flags typed for routine operations. For example instead of:</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>gnfd <span class="token parameter variable">--home</span><span class="token operator">=</span>./ <span class="token parameter variable">--node</span><span class="token operator">=</span><span class="token operator">&lt;</span>node address<span class="token operator">&gt;</span> --chain-id<span class="token operator">=</span><span class="token string">&quot;testchain-9000&quot;</span> --keyring-backend<span class="token operator">=</span>test tx <span class="token punctuation">..</span>. <span class="token parameter variable">--from</span><span class="token operator">=</span><span class="token operator">&lt;</span>key name<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>this will be more convenient:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># define env variables in .env, .envrc etc</span>
<span class="token assign-left variable">GNFD_HOME</span><span class="token operator">=</span><span class="token operator">&lt;</span>path to home<span class="token operator">&gt;</span>
<span class="token assign-left variable">GNFD_NODE</span><span class="token operator">=</span><span class="token operator">&lt;</span>node address<span class="token operator">&gt;</span>
<span class="token assign-left variable">GNFD_CHAIN_ID</span><span class="token operator">=</span><span class="token string">&quot;testchain-9000&quot;</span>
<span class="token assign-left variable">GNFD_KEYRING_BACKEND</span><span class="token operator">=</span><span class="token string">&quot;test&quot;</span>

<span class="token comment"># and later just use</span>
gnfd tx <span class="token punctuation">..</span>. <span class="token parameter variable">--from</span><span class="token operator">=</span><span class="token operator">&lt;</span>key name<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,18);function v(f,g){const s=c("ExternalLinkIcon");return o(),t("div",null,[d,a("p",null,[e("There is no set way to create a CLI, but Greenfield typically use the "),a("a",p,[e("Cobra Library"),i(s)]),e(". Building a CLI with Cobra entails defining commands, arguments, and flags. Commands understand the actions users wish to take, such as "),m,e(" for creating a transaction and "),h,e(" for querying the application. Each command can also have nested subcommands, necessary for naming the specific transaction type. Users also supply "),u,e(", such as account numbers to send coins to, and flags to modify various aspects of the commands, such as gas prices or which node to broadcast to.")]),b])}const _=n(l,[["render",v],["__file","index.html.vue"]]);export{_ as default};
