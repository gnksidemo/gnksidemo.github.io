import{_ as l,W as c,X as r,Y as e,Z as n,$ as s,a0 as p,a1 as a,C as o}from"./framework-a045178c.js";const d={},u=a(`<h1 id="interacting-with-the-node" tabindex="-1"><a class="header-anchor" href="#interacting-with-the-node" aria-hidden="true">#</a> Interacting with the Node</h1><p>There are multiple ways to interact with a node: using the CLI, using gRPC or using the REST endpoints.</p><h2 id="using-the-cli" tabindex="-1"><a class="header-anchor" href="#using-the-cli" aria-hidden="true">#</a> Using the CLI</h2><p>Now that your chain is running, it is time to try sending tokens from the first account you created to a second account. In a new terminal window, start by running the following query command:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>gnfd query bank balances <span class="token variable">$MY_VALIDATOR_ADDRESS</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>You should see the current balance of the account you created, equal to the original balance of <code>BNB</code> you granted it minus the amount you delegated via the <code>gentx</code>. Now, create a second account:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>gnfd keys <span class="token function">add</span> recipient --keyring-backend <span class="token builtin class-name">test</span>

<span class="token comment"># Put the generated address in a variable for later use.</span>
<span class="token assign-left variable">RECIPIENT</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>gnfd keys show recipient <span class="token parameter variable">-a</span> --keyring-backend <span class="token builtin class-name">test</span><span class="token variable">)</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The command above creates a local key-pair that is not yet registered on the chain. An account is created the first time it receives tokens from another account. Now, run the following command to send tokens to the <code>recipient</code> account:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>gnfd tx bank send <span class="token variable">$MY_VALIDATOR_ADDRESS</span> <span class="token variable">$RECIPIENT</span> 1000000BNB  --keyring-backend <span class="token builtin class-name">test</span>

<span class="token comment"># Check that the recipient account did receive the tokens.</span>
gnfd query bank balances <span class="token variable">$RECIPIENT</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="using-grpc" tabindex="-1"><a class="header-anchor" href="#using-grpc" aria-hidden="true">#</a> Using gRPC</h2><p>The Protobuf ecosystem developed tools for different use cases, including code-generation from <code>*.proto</code> files into various languages. These tools allow the building of clients easily. Often, the client connection (i.e. the transport) can be plugged and replaced very easily.</p><p>Since the code generation library largely depends on your own tech stack, we will only present three alternatives:</p><ul><li><code>grpcurl</code> for generic debugging and testing,</li><li>programmatically via Go,</li></ul><h3 id="grpcurl" tabindex="-1"><a class="header-anchor" href="#grpcurl" aria-hidden="true">#</a> grpcurl</h3>`,14),h={href:"https://github.com/fullstorydev/grpcurl",target:"_blank",rel:"noopener noreferrer"},g=e("code",null,"curl",-1),b=a(`<p>Assuming you have a local node running (either a localnet, or connected a live network), you should be able to run the following command to list the Protobuf services available (you can replace <code>localhost:9000</code> by the gRPC server endpoint of another node, which is configured under the <code>grpc.address</code> field inside <code>app.toml</code>:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>grpcurl <span class="token parameter variable">-plaintext</span> localhost:9090 list
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>You should see a list of gRPC services, like <code>cosmos.bank.v1beta1.Query</code>. This is called reflection, which is a Protobuf endpoint returning a description of all available endpoints. Each of these represents a different Protobuf service, and each service exposes multiple RPC methods you can query against.</p><p>In order to get a description of the service you can run the following command:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>grpcurl <span class="token punctuation">\\</span>
    localhost:9090 <span class="token punctuation">\\</span>
    describe cosmos.bank.v1beta1.Query                  <span class="token comment"># Service we want to inspect</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>It&#39;s also possible to execute an RPC call to query the node for information:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>grpcurl <span class="token punctuation">\\</span>
    <span class="token parameter variable">-plaintext</span>
    <span class="token parameter variable">-d</span> <span class="token string">&#39;{&quot;address&quot;:&quot;$MY_VALIDATOR&quot;}&#39;</span> <span class="token punctuation">\\</span>
    localhost:9090 <span class="token punctuation">\\</span>
    cosmos.bank.v1beta1.Query/AllBalances
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="query-for-historical-state-using-grpcurl" tabindex="-1"><a class="header-anchor" href="#query-for-historical-state-using-grpcurl" aria-hidden="true">#</a> Query for historical state using grpcurl</h4>`,8),v={href:"https://github.com/grpc/grpc-go/blob/master/Documentation/grpc-metadata.md",target:"_blank",rel:"noopener noreferrer"},m=e("code",null,"x-cosmos-block-height",-1),k=a(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>grpcurl <span class="token punctuation">\\</span>
    <span class="token parameter variable">-plaintext</span> <span class="token punctuation">\\</span>
    <span class="token parameter variable">-H</span> <span class="token string">&quot;x-cosmos-block-height: 279256&quot;</span> <span class="token punctuation">\\</span>
    <span class="token parameter variable">-d</span> <span class="token string">&#39;{&quot;address&quot;:&quot;$MY_VALIDATOR&quot;}&#39;</span> <span class="token punctuation">\\</span>
    localhost:9090 <span class="token punctuation">\\</span>
    cosmos.bank.v1beta1.Query/AllBalances
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Assuming the state at that block has not yet been pruned by the node, this query should return a non-empty response.</p><h3 id="programmatically-via-go" tabindex="-1"><a class="header-anchor" href="#programmatically-via-go" aria-hidden="true">#</a> Programmatically via Go</h3><p>The following snippet shows how to query the state using gRPC inside a Go program. The idea is to create a gRPC connection, and use the Protobuf-generated client code to query the gRPC server.</p><h4 id="install-greenfield-go-sdk" tabindex="-1"><a class="header-anchor" href="#install-greenfield-go-sdk" aria-hidden="true">#</a> Install Greenfield GO-sdk</h4>`,5),f={href:"https://github.com/bnb-chain/greenfield-go-sdk",target:"_blank",rel:"noopener noreferrer"},y=a(`<p>Init client without key manager, you should use it for only querying purpose.</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>client <span class="token operator">:=</span> <span class="token function">NewGreenfieldClient</span><span class="token punctuation">(</span><span class="token string">&quot;localhost:9090&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;greenfield_9000-121&quot;</span><span class="token punctuation">)</span>

query <span class="token operator">:=</span> banktypes<span class="token punctuation">.</span>QueryBalanceRequest<span class="token punctuation">{</span>
    Address<span class="token punctuation">:</span> <span class="token string">&quot;0x76d244CE05c3De4BbC6fDd7F56379B145709ade9&quot;</span><span class="token punctuation">,</span>
    Denom<span class="token punctuation">:</span>   <span class="token string">&quot;BNB&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
res<span class="token punctuation">,</span> err <span class="token operator">:=</span> client<span class="token punctuation">.</span>BankQueryClient<span class="token punctuation">.</span><span class="token function">Balance</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>query<span class="token punctuation">)</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Init client with key manager, for signing and sending tx</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>keyManager<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> keys<span class="token punctuation">.</span><span class="token function">NewPrivateKeyManager</span><span class="token punctuation">(</span><span class="token string">&quot;ab463aca3d2965233da3d1d6108aa521274c5ddc2369ff72970a52a451863fbf&quot;</span><span class="token punctuation">)</span>
gnfdClient <span class="token operator">:=</span> <span class="token function">NewGreenfieldClient</span><span class="token punctuation">(</span><span class="token string">&quot;localhost:9090&quot;</span><span class="token punctuation">,</span> 
	                            <span class="token string">&quot;greenfield_9000-121&quot;</span><span class="token punctuation">,</span>
	                            <span class="token function">WithKeyManager</span><span class="token punctuation">(</span>km<span class="token punctuation">)</span><span class="token punctuation">,</span>
                                    <span class="token function">WithGrpcDialOption</span><span class="token punctuation">(</span>grpc<span class="token punctuation">.</span><span class="token function">WithTransportCredentials</span><span class="token punctuation">(</span>insecure<span class="token punctuation">.</span><span class="token function">NewCredentials</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="using-the-rest-endpoints" tabindex="-1"><a class="header-anchor" href="#using-the-rest-endpoints" aria-hidden="true">#</a> Using the REST Endpoints</h2>`,5),q=e("code",null,"cosmos.bank.v1beta1.Query/AllBalances",-1),_=e("code",null,"GET /cosmos/bank/v1beta1/balances/{address}",-1),w=a(`<p>As a concrete example, the <code>curl</code> command to make balances request is:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token punctuation">\\</span>
    <span class="token parameter variable">-X</span> GET <span class="token punctuation">\\</span>
    <span class="token parameter variable">-H</span> <span class="token string">&quot;Content-Type: application/json&quot;</span> <span class="token punctuation">\\</span>
    http://localhost:1317/cosmos/bank/v1beta1/balances/<span class="token variable">$MY_VALIDATOR</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Make sure to replace <code>localhost:1317</code> with the REST endpoint of your node, configured under the <code>api.address</code> field.</p><p>The list of all available REST endpoints is available as a Swagger specification file, it can be viewed at <code>localhost:1317/swagger</code>. Make sure that the <code>api.swagger</code> field is set to true in your <code>app.toml</code>.</p><h3 id="query-for-historical-state-using-rest" tabindex="-1"><a class="header-anchor" href="#query-for-historical-state-using-rest" aria-hidden="true">#</a> Query for historical state using REST</h3><p>Querying for historical state is done using the HTTP header <code>x-cosmos-block-height</code>. For example, a curl command would look like:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token punctuation">\\</span>
    <span class="token parameter variable">-X</span> GET <span class="token punctuation">\\</span>
    <span class="token parameter variable">-H</span> <span class="token string">&quot;Content-Type: application/json&quot;</span> <span class="token punctuation">\\</span>
    <span class="token parameter variable">-H</span> <span class="token string">&quot;x-cosmos-block-height: 279256&quot;</span>
    http://localhost:1317/cosmos/bank/v1beta1/balances/<span class="token variable">$MY_VALIDATOR</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Assuming the state at that block has not yet been pruned by the node, this query should return a non-empty response.</p>`,8);function x(R,C){const t=o("ExternalLinkIcon"),i=o("RouterLink");return c(),r("div",null,[u,e("p",null,[e("a",h,[n("grpcurl"),s(t)]),n(" is like "),g,n(" but for gRPC. It is also available as a Go library, but we will use it only as a CLI command for debugging and testing purposes. Follow the instructions in the previous link to install it.")]),b,e("p",null,[n("You may also query for historical data by passing some "),e("a",v,[n("gRPC metadata"),s(t)]),n(" to the query: the "),m,n(" metadata should contain the block to query. Using grpcurl as above, the command looks like:")]),k,e("p",null,[n("Refer to "),e("a",f,[n("Go-sdk doc"),s(t)]),n(" to install the latest dependency.")]),y,e("p",null,[n("As described in the "),s(i,{to:"/docs/api-sdk/grpc_rest.html"},{default:p(()=>[n("gRPC guide")]),_:1}),n(", all gRPC services on the Cosmos SDK are made available for more convenient REST-based queries. The format of the URL path is based on the Protobuf service method's full-qualified name, but may contain small customizations so that final URLs look more idiomatic. For example, the REST endpoint for the "),q,n(" method is "),_,n(". Request arguments are passed as query parameters.")]),w])}const P=l(d,[["render",x],["__file","interact-node.html.vue"]]);export{P as default};
