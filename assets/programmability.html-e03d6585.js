import{_ as s}from"./03-Cross-chain-Architecture-30426338.js";import{_ as n,W as o,X as l,Y as t,Z as e,$ as i,a0 as r,a1 as d,C as h}from"./framework-a045178c.js";const c={},p=d('<h1 id="programmability" tabindex="-1"><a class="header-anchor" href="#programmability" aria-hidden="true">#</a> Programmability</h1><p>The real power of the Greenfield ecosystem lies in that the platform is not only designed to store the data, but also to support the creation of value based on the data assets and its related economy.</p><p>The asset traits of the data are firstly established on the permissions, e.g. the permission to read the data. When this right is disconnected from the data itself, they become tradable assets and enlarge the value of the data. This can be amplified when the data itself can be executable (a new type of &quot;Smart Code&quot;), interact with each other, and generate new data. This creates a lot of room to imagine building a new, data-intensive, trustless computing environment.</p><p>Secondly, the data permissions can be transferred cross-chain onto BSC and become digital assets there. This creates a variety of possibilities to integrate these assets with the existing DeFi protocols and models on BSC.</p><p>This gets even further enhanced by the smart contracts on BSC, which enjoy the same address format as accounts on the Greenfield blockchain and can be the owners of the data objects and inherit different permissions. This will unleash many new business opportunities based on the data and its operations.</p><div class="hint-container info"><p class="hint-container-title">Info</p><p>It does not mean developers have to build dapp based on BSC network. Excellent infrastructure, applications, and tools can be built directly on the Greenfield network.</p></div><h2 id="cross-chain-with-bsc" tabindex="-1"><a class="header-anchor" href="#cross-chain-with-bsc" aria-hidden="true">#</a> Cross-Chain with BSC</h2><p>The cross-chain model expects to achieve the following goals:</p><ul><li><p>integratable with the existing systems: try to reuse the current infrastructure and dApps as much as possible, such as NFT Marketplace, data indexing, and blockchain explorers.</p></li><li><p>programmable: dApps can define how they want to wrap the assets from Greenfield.</p></li><li><p>secure and recoverable.</p></li></ul><p>The native cross-chain bridge is maintained and secured by the validators of Greenfield, via a new relayer system based on an aggregated multisig scheme (more details in the later sections). Validators will run the relayers to facilitate the high bandwidth and fast bridge.</p><p>BNB will be transferred from BSC to Greenfield as the first cross-chain action. The initial validator set of Greenfield at the genesis will first lock a certain amount of BNB into the &quot;Greenfield Token Hub&quot; contract on BSC. This contract will also be used as part of the native bridge for BNB transferring after the genesis. These initial locked BNB will be used as the self-stake of validators and early days gas fees.</p><h2 id="framework" tabindex="-1"><a class="header-anchor" href="#framework" aria-hidden="true">#</a> Framework</h2><div align="center"><img src="'+s+'" height="95%" width="95%"></div><div align="center"><i>Figure Cross-chain Architecture</i></div><p>The bottom layer is a cross-chain <strong>Communication Layer</strong>, which focuses on primitive communication package handling and verification. The middle layer implements the <strong>Resource Mirror</strong>. It is responsible for managing the resource assets that are defined on Greenfield but mirrored onto BSC. The top layer is the <strong>Application Layer</strong>, which are the smart contracts implemented by community developers on BSC to operate the mirrored resource entities with their primitives; Greenfield does not have such an application layer since itself does not provide programmability yet. The real dApps will have some part in this Application Layer and also interact with Greenfield Core and all sorts of supporting infrastructures.</p><p>Because of the asymmetric framework, BSC focuses more on the application/control plane, while Greenfield is the data plane. To avoid state racing, the following rules are introduced:</p><ul><li><p>Any resources that are initiated to create by BSC can only be controlled by BSC.</p></li><li><p>Any resources that are controlled by BSC can not transfer control rights to Greenfield.</p></li><li><p>Any resources that are controlled by Greenfield can transfer control rights to BSC.</p></li></ul>',17),m=t("h2",{id:"get-started-with-building-dapp",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#get-started-with-building-dapp","aria-hidden":"true"},"#"),e(" Get Started with building dapp")],-1);function f(u,b){const a=h("RouterLink");return o(),l("div",null,[p,t("p",null,[e("More details are discussed in "),i(a,{to:"/docs/greenfield-blockchain/modules/cross-chain.html"},{default:r(()=>[e("Cross Chain Module design")]),_:1}),e(".")]),m,t("ul",null,[t("li",null,[i(a,{to:"/docs/greenfield-blockchain/modules/cross-chain.html"},{default:r(()=>[e("Learn more about the cross-chain mechanism")]),_:1})]),t("li",null,[i(a,{to:"/docs/dapp/quick-start.html"},{default:r(()=>[e("Start building dapps with Greenfield")]),_:1})])])])}const w=n(c,[["render",f],["__file","programmability.html.vue"]]);export{w as default};
