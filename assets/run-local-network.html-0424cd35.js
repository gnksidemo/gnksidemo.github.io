import{_ as t,W as o,X as r,Y as n,Z as e,$ as s,a1 as i,C as l}from"./framework-a045178c.js";const d={},c=i('<h1 id="run-local-network" tabindex="-1"><a class="header-anchor" href="#run-local-network" aria-hidden="true">#</a> Run Local Network</h1><p>This guide helps you create a validator node that runs the network locally for testing and other development-related purposes.</p><h2 id="prerequisites" tabindex="-1"><a class="header-anchor" href="#prerequisites" aria-hidden="true">#</a> Prerequisites</h2><p>A computer running a Unix-like operating system (e.g., macOS, Linux) Basic familiarity with the command line Step 1: Install dependencies</p><p>The first step is to install the necessary dependencies, which include <code>Golang</code>, <code>Git</code>. Here are the steps to install them:</p>',5),u={href:"https://golang.org/dl/",target:"_blank",rel:"noopener noreferrer"},p={href:"https://git-scm.com/book/en/v2/Getting-Started-Installing-Git",target:"_blank",rel:"noopener noreferrer"},h=i(`<p>Build the Greenfield CLI tools by running the following command in your terminal:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone https://github.com/bnb-chain/greenfield.git
<span class="token builtin class-name">cd</span> greenfield
<span class="token function">make</span> build
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="create-genesis-file-and-start-the-network" tabindex="-1"><a class="header-anchor" href="#create-genesis-file-and-start-the-network" aria-hidden="true">#</a> Create Genesis File and Start the Network</h2><p>Step 1: Initialize configuration files</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># The argument &lt;moniker&gt; is the custom username of your node, it should be human-readable.</span>
./build/bin/gnfd init <span class="token operator">&lt;</span>moniker<span class="token operator">&gt;</span> --chain-id greenfield_9000-01 --staking-bond-denom BNB
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>All these configuration files are in ~/.gnfd by default, but you can overwrite the location of this folder by passing the --home flag.</p><p>The ~/.gnfd folder has the following structure:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>.                                   # ~/.gnfd
  |- data                           # Contains the databases used by the node.
  |- config/
      |- app.toml                   # Application-related configuration file.
      |- config.toml                # Tendermint-related configuration file.
      |- genesis.json               # The genesis file.
      |- node_key.json              # Private key to use for node authentication in the p2p protocol.
      |- priv_validator_key.json    # Private key to use as a validator in the consensus protocol.

Step 2: Generate a validator and relayer keys and write it into the genesis block

Before starting the chain, you need to populate the state with at least one account.

1. Generate key in local store.

\`\`\`bash
./build/bin/gnfd keys add validator --keyring-backend test
./build/bin/gnfd keys add relayer --keyring-backend test
./build/bin/gnfd keys add relayer_bls --keyring-backend test --algo eth_bls
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Step 2. Add the balances to genesis.json Now that you have created a local account, go ahead and grant it some <code>BNB</code> tokens in your chain&#39;s genesis file. Doing so will also make sure your chain is aware of this account&#39;s existence:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">VALIDATOR_ADDR</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>./build/bin/gnfd keys show validator <span class="token parameter variable">-a</span> --keyring-backend <span class="token builtin class-name">test</span><span class="token variable">)</span></span>
<span class="token assign-left variable">RELAYER_ADDR</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>./build/bin/gnfd keys show relayer <span class="token parameter variable">-a</span> --keyring-backend <span class="token builtin class-name">test</span><span class="token variable">)</span></span>
<span class="token assign-left variable">RELAYER_BLS</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>./build/bin/gnfd keys show relayer_bls --keyring-backend <span class="token builtin class-name">test</span> <span class="token parameter variable">--output</span> json <span class="token operator">|</span> jq <span class="token parameter variable">-r</span> .pubkey_hex<span class="token variable">)</span></span>
./build/bin/gnfd add-genesis-account <span class="token variable">\${VALIDATOR_ADDR}</span> 100000000000000000000000000BNB
./build/bin/gnfd add-genesis-account <span class="token variable">\${RELAYER_ADDR}</span> 100000000000000000000000000BNB
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Step 3. Put generated Txs into genesis.json Now that your account has some tokens, you need to add a validator to your chain.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./build/bin/gnfd collect-gentxs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Step 4: Configuring the Node Using app.toml and config.toml</p><p>The program automatically generates two configuration files inside ~/.gnfd/config by default:</p>`,14),b={href:"https://docs.tendermint.com/master/nodes/configuration.html",target:"_blank",rel:"noopener noreferrer"},g=n("li",null,"app.toml: generated by the Cosmos SDK, and used to configure your app, such as state pruning strategies, telemetry, gRPC and REST servers configuration, state sync...",-1),m=i(`<p>Step 5: Launch your chain</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./build/bin/gnfd start
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2><p>The Greenfield chain is built using the <code>cosmos-sdk</code> and <code>Tendermint</code> core. There are various official configuration documents that can be referred to. These include:</p>`,4),v={href:"https://docs.cosmos.network/main/run-node/run-node",target:"_blank",rel:"noopener noreferrer"},f={href:"https://docs.tendermint.com/master/nodes/configuration.html",target:"_blank",rel:"noopener noreferrer"};function k(y,_){const a=l("ExternalLinkIcon");return o(),r("div",null,[c,n("p",null,[e("Install Golang by following the instructions for your operating system on the "),n("a",u,[e("official Golang website"),s(a)]),e(".")]),n("p",null,[e("Install Git by following the instructions for your operating system on the "),n("a",p,[e("official Git website"),s(a)]),e(".")]),h,n("ul",null,[n("li",null,[e("config.toml: used to configure the Tendermint, learn more on "),n("a",b,[e("Tendermint's documentation"),s(a)]),e(",")]),g]),m,n("ol",null,[n("li",null,[n("a",v,[e("Cosmos-sdk guide for running a node"),s(a)]),e(" 2"),n("a",f,[e("Tendermint Docs"),s(a)])])])])}const x=t(d,[["render",k],["__file","run-local-network.html.vue"]]);export{x as default};
